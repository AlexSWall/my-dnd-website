/*<?*/
/**
 *
 */

/* ----------------------------------------------------------- */ {

namespace App\Infoboxes;

class Grammar
{
	public static \App\Logging\Logger $logger;

	static function getNewGrammarParser()
	{
		PEGParser::$logger = self::$logger;
		return new PEGParser();
	}
}

// This must be on a separate line
}
/* ----------------------------------------------------------- */ {

public static \App\Logging\Logger $logger;

private function getCurrPos()
{
	return $this->currPos;
}

} /* ----------------------------------------------------------- */

/* == Top-level Rules == */

start "start" =
	startOfFile items:infoboxStructure anySpacing endOfFile
	{
		// Remove null values and return the items that remain
		return array_values( array_filter(
			$items,
			fn($e) => !is_null( $e )
		) );
	}

infoboxStructure = items:(
		anySpacing i:item endOfLine
		{
			return $i;
		}
		/ anySpacing newLine
		{
			return null;
		}
	)*
	{
		return $items;
	}

item =
	header
	/ horizontalLine
	/ image
	/ caption
	/ entry

header = "==" "="* headerChars:(char:[^=]* { return $char; } ) "==" "="* anySpacing &endOfLine
	{
		return new InfoboxSubheading(trim(implode('', $headerChars)));
	}

horizontalLine = "---" "-"* anySpacing &endOfLine
	{
		return new InfoboxHorizontalRule();
	}

image = "Image " key:key &endOfLine
	{
		return new InfoboxImage($key);
	}

caption = "Caption " key:key &endOfLine
	{
		return new InfoboxCaption($key);
	}

entry = keys:entryKeys keyTitles:entryKeyTitles &endOfLine
	{
		$entries = [];

		$numEntries = min(count($keys), count($keyTitles));

		foreach( range(0, $numEntries - 1) as $i )
		{
			$entries[] = new InfoboxEntry($keys[$i], $keyTitles[$i]);
		}

		return $entries;
	}

// entryKeys eats up trailing space and trims it, because key does so.
entryKeys =
	firstKey:key
	otherKeys:(
		"/" anySpacing otherKey:key
		{
			return $otherKey;
		}
	)*
	{
		return array_merge([$firstKey], $otherKeys);
	}

entryKeyTitles =
	firstTitle:entryKeyTitle
	otherTitles:(
		anySpacing "/" anySpacing otherTitle:entryKeyTitle
		{
			return $otherTitle;
		}
	)*
	{
		return array_merge([$firstTitle], $otherTitles);
	}

entryKeyTitle =
	'"' chars:([^"]*) '"'
	{
		return trim(implode('', $chars));
	}
	/ "'" chars:([^']*) "'"
	{
		return trim(implode('', $chars));
	}

// eats up trailing space and trims it
key = chars:([a-zA-Z0-9_ -]+)
	{
		return trim(implode('', $chars));
	}


/* == String Rules == */

remainderOfLine =
	$ (!newLine .)*

someSpacing =
	$ spacing+

anySpacing =
	$ spacing*

spacing =
	[ \t]

spacingOrEOL =
	spacing
	/ endOfLine

startOfLine =
	newLine
	/ startOfFile

endOfLine =
	newLine
	/ endOfFile

newLine =
	'\n' / '\r\n'


/* == Positional Rules == */

startOfFile =
	& { return $this->getCurrPos() === 0; } {
		return [];
	}

endOfFile =
	& { return $this->getCurrPos() === $this->inputLength; } {
		return [];
	}

